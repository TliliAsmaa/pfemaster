import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:http/http.dart' as http;
import 'analyse_resultat.dart';
import 'resultats_page.dart';
import 'prediction_data.dart';
import 'dart:convert';
class ImagePredictionPage extends StatefulWidget {
  const ImagePredictionPage({super.key});

  @override
  State<ImagePredictionPage> createState() => _ImagePredictionPageState();
}

class _ImagePredictionPageState extends State<ImagePredictionPage> {
  File? _image;
  bool _isLoading = false;


  Future<void> _pickImageFromGallery() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
      });
    }
  }

  Future<void> _pickImageFromCamera() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.camera);
    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
      });
    }
  }


/*Future<void> _sendImageToBackend(File imageFile) async {
  var uri = Uri.parse('http://192.168.7.247:5000/extract');
  var request = http.MultipartRequest('POST', uri);

  request.files.add(await http.MultipartFile.fromPath('image', imageFile.path));

  var response = await request.send();

  if (response.statusCode == 200) {
    final responseBody = await response.stream.bytesToString();
    print("‚úÖ R√©sultat du backend : $responseBody");

    // Tu peux afficher le r√©sultat dans l'UI ici
  } else {
    print("‚ùå Erreur backend : ${response.statusCode}");
  }
}*/

 Future<void> _analyserImage() async {
    if (_image == null) return;
    setState(() {
      _isLoading = true;
    });

    final uri = Uri.parse('http:// 192.168.1.39:5000/analyse');
    var request =
        http.MultipartRequest('POST', uri)
          ..fields['gender'] = 'homme'
          ..fields['age'] = '30'
          ..files.add(await http.MultipartFile.fromPath('image', _image!.path));

    var response = await request.send();

    if (response.statusCode == 200) {
      final responseBody = await response.stream.bytesToString();
      try {
        final jsonMap = json.decode(responseBody);

        if (jsonMap['results'] != null && jsonMap['results'] is List) {
          final results = jsonMap['results'] as List;
          List<AnalyseResult> analyses =
              results.map((r) => AnalyseResult.fromJson(r)).toList();
          PredictionData? predictionData;
          if (jsonMap['data'] != null) {
            predictionData = PredictionData.fromJson(jsonMap['data']);
          }
          if (mounted) {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder:
                    (context) => ResultatsPage(
                      resultats: analyses,
                      resultats2:
                          predictionData != null ? [predictionData] : [],
                    ),
              ),
            );
          }
        } else {
          _showError("Format inattendu : pas de cl√© 'results'.");
        }
      } catch (e) {
        _showError("Erreur de d√©codage JSON : $e");
      }
    } else {
      _showError("Erreur lors de l'analyse");
    }

    setState(() {
      _isLoading = false;
    });
  }

  void _showError(String message) {
    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            title: const Text("Erreur"),
            content: Text(message),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text("OK"),
              ),
            ],
          ),
    );
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor:  Color(0xFFF7FBFF),
      appBar: AppBar(
       // title: Text("Pr√©diction via Image"),
       backgroundColor: Color(0xFFF7FBFF),
      ),
      body:
      Container(
        child:ListView(
          children:[
            Center(
        
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            
            children: [

              const SizedBox(height: 20),
              const Text(
                "Bienvenue dans votre assistant de sant√© !",
                textAlign: TextAlign.center,
                style: TextStyle(
                       
                        fontSize: 27,
                        fontWeight: FontWeight.w400,
                        color:Color(0xFF4A90E2),
                        height: 1.8,
                        letterSpacing:1.5
                      ),
              ),
              SizedBox(height:20),
              const Text(
                "Veuillez importer une image claire et lisible de votre test m√©dical, et laissez notre syst√®me intelligent vous fournir une analyse rapide et fiable.",
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color:Colors.black,
                        height: 1.5,
                        letterSpacing:1.5
                      ),
                
                
              ),
              const SizedBox(height: 40),
              Container(
                
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 10)],
                ),
                child: Column(
                  children: [
                    Icon(Icons.cloud_upload, size: 50, color: Colors.blue),
                    const SizedBox(height: 16),
                    const Text(
                      "Importer une image",
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                   
                    const SizedBox(height: 20),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        ElevatedButton.icon(
                          onPressed: _pickImageFromGallery,
                          icon: Icon(Icons.folder, color:Colors.white),
                          label: Text("Parcourir",style:TextStyle(color:Colors.white)),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.blue,
                          ),
                        ),
                        const SizedBox(width: 10),
                        OutlinedButton.icon(
                          onPressed: _pickImageFromCamera,
                          icon: Icon(Icons.camera_alt),
                          label: Text("Utiliser la cam√©ra"),
                          style: OutlinedButton.styleFrom(
                            foregroundColor: Colors.blue,
                            side: BorderSide(color: Colors.blue),
                          ),
                        ),
                      ],
                    )
                  ],
                ),
              ),
              const SizedBox(height: 30),
              if (_image != null)
                Column(
                  children: [
                    Text("Image s√©lectionn√©e :"),
                    const SizedBox(height: 10),
                    Image.file(_image!, height: 200),

                     // üëâ Tu ajoutes le bouton ici :
                     const SizedBox(height: 20),
                     _isLoading
        ? CircularProgressIndicator()
        : ElevatedButton(
           onPressed: () async {
  if (_image != null) {
    await _analyserImage();
  }
},

            child: Text("Analyser l'image"),
          ),
                  ],
                ),
            ],
          ),
        ),
      ),
          ],
        ),
      ),
       
    );
  }
}





